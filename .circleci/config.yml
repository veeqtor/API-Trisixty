default: &defaults
  docker:
    # specify the version you desire here
    # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
    - image: circleci/python:3.6.5
      environment:
        PROJECT_PATH: /home/circleci/trisixty-api
        CC_TEST_REPORTER_ID: ${CC_TEST_REPORTER_ID}
        SECRET_KEY: ${SECRET_KEY}
        DB_NAME: ${DB_NAME}
        DB_PASS: ${DB_PASS}
        DB_HOST: ${DB_HOST}
        DB_USER: ${DB_USER}
        TEST_DB_NAME: ${TEST_DB_NAME}

    # Specify service dependencies here if necessary
    # CircleCI maintains a library of pre-built images
    # documented at https://circleci.com/docs/2.0/circleci-images/
    - image: circleci/postgres:9.6.2
      environment:
        POSTGRES_USER: root
        POSTGRES_DB: trisixty_test
        POSTGRES_PASSWORD: ${DB_PASS}

  # specify working directory
  working_directory: ~/trisixty-api

attach_workspace: &cmd_attach_workspace
  attach_workspace:
    at: ~/trisixty-api/tmp

cmd_install_dependencies: &cmd_install_dependencies
  run:
    name: Install dependencies
    command: |
      sudo pip install pipenv
      pipenv sync --dev


wait_for_postgres: &cmd_wait_for_postgres
  run:
    name: Waiting for Postgres to be ready
    command: |
      dockerize -wait tcp://localhost:5432 -timeout 1m

download_cc_test_reporter: &cmd_download_cc_test_reporter
  run:
    name: Download cc-test-reporter
    command: |
      mkdir -p tmp/
      curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > /tmp/cc-test-reporter
      chmod +x /tmp/cc-test-reporter

save_cache: &cmd_save_cache
  save_cache:
    key: api-dependencies-{{ checksum "Pipfile.lock" }}
    paths:
      - "/usr/local/bin"
      - "/usr/local/lib/python3.6/site-packages"

restore_cache: &cmd_restore_cache
  restore_cache:
    keys:
      - api-dependencies-{{ checksum "Pipfile.lock" }}
      # fallback to using the latest cache if no exact match is found
      - api-dependencies-

# Python CircleCI 2.0 configuration file
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  run_tests:
    <<: *defaults
    steps:
      - checkout
      - *cmd_attach_workspace
      - run: sudo chown -R circleci:circleci /usr/local/bin
      - run: sudo chown -R circleci:circleci /usr/local/lib/python3.6/site-packages
      - *cmd_restore_cache
      - *cmd_install_dependencies
      - *cmd_save_cache
      - *cmd_wait_for_postgres
      - *cmd_download_cc_test_reporter
      - run:
          name: run tests
          command: |
            pipenv run pytest
            /tmp/cc-test-reporter format-coverage coverage.xml -t "coverage.py" -o "tmp/cc.testreport.json"
      - persist_to_workspace:
          root: tmp
          paths:
            - cc.testreport.json

  upload_coverage:
    <<: *defaults
    steps:
      - checkout
      - *cmd_download_cc_test_reporter
      - *cmd_attach_workspace
      - run:
          name: Upload coverage results to Code Climate
          command: |
            /tmp/cc-test-reporter upload-coverage -i tmp/cc.testreport.json
      - store_artifacts:
          path: test-reports
          destination: test-reports

  deploy_heroku:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - *cmd_attach_workspace
      - run:
          name: Deploy to heroku
          command: |

            env >> .env

            # install heroku CLI
            curl https://cli-assets.heroku.com/install.sh | sh

            # login to heroku docker registry
            heroku container:login

            # Login to heroku registry
            docker login --username=$HEROKU_LOGIN --password=$HEROKU_API_KEY registry.heroku.com


            #  Build docker image for the docker container
            #  Tag and Push image to heroku container registory
            docker build -t registry.heroku.com/$APP_NAME/web -f docker-heroku/Dockerfile .
            docker push registry.heroku.com/$APP_NAME/web

            # release application
            heroku container:release web --app $APP_NAME
workflows:
  version: 2
  build:
    jobs:
      - run_tests
      - upload_coverage:
          requires:
            - run_tests
      - deploy_heroku:
          requires:
            - run_tests
            - upload_coverage
          filters:
            branches:
              only:
                - develop
            tags:
              only:
                - /v[0-9]+(\.[0-9]+)*/


